
@using ChessApp.Data
@using ChessApp.Models
@using DataAccessLib
@using DataAccessLib.Models

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IUserData dbUser
@inject IRoomData dbRoom;
@inject SignalStateContainer SignalStateContainer
@inject NavigationManager NavManager

@if (AuthenticationState != null && AuthenticationState.User.Identity.IsAuthenticated)
{
    @if (users == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <ul class="nav flex-column px-3">
            <li class="nav-item p-2">
                <a href=""
                   class="nav-link text-right color-transition light-light-text dark-light-text-hover"
                   @onclick="LogoutBtnOnClick">
                    Log out
                </a>
            </li>

            <li class="nav-item p-3 text-center">
                <h7 class="dark-mid-text">Online players</h7>
            </li>

            <li class="nav-item px-3">
                @foreach (var u in users)
                {
                    <p class="light-light-text">@u.Username</p>
                }
            </li>
        </ul>
    }
}

@code {

    private AuthenticationState AuthenticationState { get; set; }

    private List<User> users;

    protected override async Task OnInitializedAsync()
    {
        var stateProvider = AuthenticationStateProvider as CustomAuthenticationStateProvider;
        AuthenticationState = await stateProvider.GetAuthenticationStateAsync();

        if (AuthenticationState != null && AuthenticationState.User.Identity.IsAuthenticated)
        {
            users = await dbUser.GetOnlineUsers();
        }
    }

    private async void LogoutBtnOnClick()
    {
        var stateProvider = AuthenticationStateProvider as CustomAuthenticationStateProvider;

        await dbUser.SetUserStatus(stateProvider.LoggedUser, false);
        stateProvider.Logout();
        AuthenticationState = await stateProvider.GetAuthenticationStateAsync();

        StateHasChanged();
        NavManager.NavigateTo("/signin");
    }
}
